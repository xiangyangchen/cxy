#!/bin/bash

# 添加 qomolo 源
# 替换 ubuntu ports 源为 repo mirror
# 调整脚本 保证即使中断重复执行也不出问题
# 添加 MIIVII APEX II PLUS 识别
# 完全通用安装 去除所有特定字段
# 调整 qomolo-ptp 到最后装
# 添加 记录信息打印

export http_proxy=http://proxy.qomolo.com:8123
export https_proxy=http://proxy.qomolo.com:8123

uid=$(id -u)

if [[ $uid != 0 ]];then
    echo 需要以root执行
    exit -1
fi

if [ -f /var/log/init_miivii.lock ];then
    echo 本机已经执行过init脚本了
    echo 上次初始化完成时间 $(cat /var/log/init_miivii.lock | tail -n 1)
    echo 是否要强制继续
    select answer in 'yes' 'no'
    do
        case $answer in
            yes) echo 继续执行init脚本
                break
                ;;
            no) echo 放弃并退出
                exit 0
                ;;
        esac
    done
fi

# 如果安装了 qomolo-ptp 先移除

dpkg -l | grep qomolo-ptp

if [[ $? == 0 ]];then
    apt remove qomolo-ptp
    timedatectl set-ntp on
    sleep 5
fi

# 鉴于安装 MIIVII APEX II PLUS 出现过几次 安装时突然无法解析的情况
# 安装时强制使用指定 dns server 解析, /etc/resolv.conf 重启会自动重新生成
cat > /etc/resolv.conf << 'EOF'
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run "systemd-resolve --status" to see details about the actual nameservers.

nameserver 192.168.66.1
nameserver 192.168.135.1
EOF

# check dns/network
check_inside_network_status=$(ping -c 4 repo.qomolo.com > /dev/null;echo $?)
check_outside_network_status=$(ping -c 4 www.baidu.com > /dev/null;echo $?)

if [[ $check_inside_network_status != 0 ]] || [[ $check_outside_network_status != 0 ]];then
    echo 域名解析/网络存在问题，请人工检查
    exit -1
fi

# 添加qomolo源
sudo wget https://repo.qomolo.com/repository/raw/gpg/public.gpg.key -O- | sudo apt-key add
echo "deb [arch=arm64] https://repo.qomolo.com/repository/alpha/ focal main"| sudo tee /etc/apt/sources.list.d/qomolo-foxy.list
echo "#deb [arch=arm64] https://repo.qomolo.com/repository/unofficial/ focal main" >> /etc/apt/sources.list.d/qomolo-foxy.list
echo 添加qomolo源完成

# 修改默认源
mv /etc/apt/sources.list /etc/apt/sources.list.bak || true
cat > /etc/apt/sources.list << 'EOF'
deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic main restricted

deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-updates main restricted

deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic universe
deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-updates universe

deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic multiverse
deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-updates multiverse

deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-backports main restricted universe multiverse


deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-security main restricted
deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-security universe
deb https://repo.qomolo.com/repository/ubuntu-mirror-tsinghua/ bionic-security multiverse

EOF
echo 替换ubuntu ports源为repo mirror完成

# 注释掉miivii无法访问的源
sed -i '/deb.*apex.*/s/^/#/' /etc/apt/sources.list.d/miivii-l4t-apt-source.list

# 基础工具
apt update -o APT::Update::Error-Mode=any

if [[ $? != 0 ]];then
    echo apt update failed, please check
    exit -1
fi

apt -y install htop nmap tcpdump curl docker.io ifupdown net-tools  python3-pip
pip3 install jetson-stats -i http://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com
systemctl restart jetson_stats.service

# netplan.io
apt -y install netplan.io

# 调整为 MAXN 模式
nvpmodel -m 0

echo "基础组件安装完毕"
echo

# vcstool
apt -y install gnupg2 lsb-release 
curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
apt update
apt -y install python3-vcstool

echo "vcs 安装完毕"
echo

# nomachine
wget -P /home/nvidia https://repo.qomolo.com/repository/raw/tools/nomachine_7.6.2_3_arm64.deb
dpkg -i /home/nvidia/nomachine_7.6.2_3_arm64.deb
sed -i '/AutomaticLoginEnable/s/^#\ \ //' /etc/gdm3/custom.conf
sed -i '/AutomaticLogin\ =/s/^#.*/AutomaticLogin\ =\ nvidia/' /etc/gdm3/custom.conf

echo "nomachine 安装完毕"
echo

# qomolo-miivii
apt -y install  qomolo-networkd-dispatcher qomolo-mcbind qomolo-miivii-cam-cfg qomolo-jetson-init qomolo-jetson-journalctl-patch qomolo-sys-monitor qomolo-updater

## replace qomolo_mcbind config
if [ -f /opt/qomolo/utils/qomolo_mcbind/config/env/10-local ];then
    cat > /opt/qomolo/utils/qomolo_mcbind/config/env/10-local << 'EOF'
#!/bin/bash

MC_BIND_INTERFSCE="bond0.sen"
MC_BIND_ADDRESS="\
239.255.10.11 \
239.255.10.12 \
239.255.10.13 \
239.255.10.14 \
239.255.10.15 \
239.255.10.16 \
239.255.10.31 \
239.255.10.32 \
239.255.10.33 \
239.255.10.34 \
239.255.10.41 \
239.255.10.42 \
239.255.10.43 \
239.255.10.44 \
239.255.10.50 \
"
EOF
fi

platform=$(cat /sys/class/miivii/eeprom/platform_info)

if [[ $platform == "MIIVII APEX XAVIER II" ]];then
    apt -y install qomolo-miivii-l4t-core
elif [[ $platform == "MIIVII APEX XAVIER II PLUS" ]];then
    apt -y install qomolo-miivii-apex-l4t-core
fi

echo "qomolo对miivii的补丁安装完毕"

# can
mv /etc/modprobe.d/blacklist-mttcan.conf /etc/modprobe.d/blacklist-mttcan.conf.back
echo "
can
can_raw
mttcan" | tee /etc/modules-load.d/mttcan.conf

cat > /etc/network/interfaces << 'EOF'
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto can0
  iface can0 inet manual
  pre-up /sbin/ip link set can0 type can bitrate 500000 restart-ms 5000
  up /sbin/ifconfig can0 up txqueuelen 1000
  down /sbin/ifconfig can0 down

auto can1
  iface can1 inet manual
  pre-up /sbin/ip link set can1 type can bitrate 500000 restart-ms 5000
  up /sbin/ifconfig can1 up txqueuelen 1000
  down /sbin/ifconfig can1 down

auto can2
  iface can2 inet manual
  pre-up /sbin/ip link set can2 type can bitrate 250000 restart-ms 5000
  up /sbin/ifconfig can2 up txqueuelen 1000
  down /sbin/ifconfig can2 down
EOF
echo "can卡设置完毕"

cat > /etc/netplan/50-bond.yaml << 'EOF'
network:
  version: 2
  renderer: networkd
  ethernets:
    eth0:
      dhcp4: yes
      optional: true
    eth1:
      optional: true
    eth2:
      optional: true
    eth3:
      dhcp4: yes
      optional: true
  bonds:
    bond0:
      dhcp4: true
      interfaces:
        - eth1
        - eth2
      parameters:
        mode: 802.3ad
        transmit-hash-policy: layer3
        mii-monitor-interval: 100
        learn-packet-interval: 100
#  vlans:
#    bond0.sen:
#      id: 2
#      link: bond0
EOF
echo "bond0的netplan设置完毕，配置为dhcp"

# disk

# 如果脚本被重复执行 停止docker 取消挂载
systemctl stop docker

while :
do
    mount_point=$(mount | grep nvme0n1p1 | awk '{print $3}')
    if [[ $mount_point != "" ]];then
        umount $mount_point
        sleep 3
    else
        break
    fi
done

# 格式化硬盘
echo -e -n "g\nn\n\n\n\nw\n" | fdisk /dev/nvme0n1
sleep 5s
# umount /data 在重复执行的情况下上面的命令会自动挂载/data
while :
do
    mount_point=$(mount | grep nvme0n1p1 | awk '{print $3}')
    if [[ $mount_point != "" ]];then
        umount $mount_point
        sleep 3
    else
        break
    fi
done
partprobe /dev/nvme0n1
sleep 5s
# umount /data 在重复执行的情况下上面的命令会自动挂载/data
while :
do
    mount_point=$(mount | grep nvme0n1p1 | awk '{print $3}')
    if [[ $mount_point != "" ]];then
        umount $mount_point
        sleep 3
    else
        break
    fi
done
echo -e -n "\n\n\n\n\n" | mkfs.ext4 /dev/nvme0n1p1

if [ ! -d /data ];then
    mkdir /data
fi

uuid=$(blkid | grep nvme0n1p1 | awk '{print $2}' | grep UUID)

if [[ $uuid == "" ]];then
	echo "获取UUID失败，中断"
	exit -1
fi

mount $uuid /data

if [[ $? != 0 ]];then
	echo "挂载失败，请检查"
	exit -1
fi

if [ ! -f /etc/fstab.init.bak ];then
    cp /etc/fstab /etc/fstab.init.bak
else
    cp /etc/fstab.init.bak /etc/fstab
fi

cat >> /etc/fstab << EOF
$uuid  /data    ext4    defaults    0    0
EOF

echo "挂载配置完成"

# mkdir 
if [ ! -d /data/docker ];then
    mkdir -p /data/docker 
fi

if [ ! -d /data/code/all_ws/ws ];then
    mkdir -p /data/code/all_ws/ws
fi

chown -R nvidia:nvidia /data/code

# change docker data
if [ ! -f /etc/docker/daemon.json.init.bak ];then
    cp /etc/docker/daemon.json /etc/docker/daemon.json.init.bak
else
    cp /etc/docker/daemon.json.init.bak /etc/docker/daemon.json
fi

sed -i '/^}/i\\ \ \ \ ,"data-root":"/data/docker"' /etc/docker/daemon.json

systemctl restart docker

gpasswd -a nvidia docker
chmod a+rw /var/run/docker.sock

echo "docker data设置完毕"

docker pull harbor.qomolo.com/arm64/xvaier-focal-runtime
echo "镜像拉取完成"

apt -y install miivii-edgeservice
docker pull harbor.miivii.com/miivii-edgeservice/miivii-edgeservice-agent
echo "miivii edge service 安装完成"

echo "安装qomolo-data"
apt -y install qomolo-data
#sleep 2
#/opt/qomolo/utils/qomolo_data/scripts/update_local_data.sh

# qpilot-setup 安装
echo "安装qpilot-setup qomolo-lidar-config qomolo-gst-plugin-ros2bridge"
apt -y install qpilot-setup qomolo-lidar-config qomolo-gst-plugin-ros2bridge

init_finish_time=$(date "+%F %T")

echo 最后安装 qomolo-ptp 
apt -y install qomolo-ptp 

echo 初始安装完成
echo $init_finish_time >> /var/log/init_miivii.lock
echo 
echo '+========================================================+'
echo '+                以下是需要记录的信息                    +'
echo '+========================================================+'


hardware_sn=$(cat /sys/class/miivii/eeprom/hardware_sn)
echo 硬件SN号：$hardware_sn

kernel_version=$(uname -r)
echo 内核版本：$kernel_version

mem=$(free -h | grep Mem | awk '{print $2}')
if [[ $mem == "31G" ]];then
    echo 内存：32G
else
    echo 内存：非常见规格
fi

disk_size=$(df -h | grep nvme0n1p1 | awk '{print $2}')
if [[ $disk_size == "880G" ]];then
    echo 硬盘：1T
else
    echo 硬盘：非常见规格
fi


echo 网卡MAC地址：
ls /sys/class/net | grep ^eth | xargs -I{} sh -c "echo -n {}:' ' ;cat /sys/class/net/{}/address"

image_id=$(docker images harbor.qomolo.com/arm64/xvaier-focal-runtime:latest --format {{.ID}})
echo xavier-focal-runtime 镜像ID：$image_id

echo qomolo/qpilot 软件版本信息：
dpkg -l | egrep "qpilot|qomolo" | awk '{print $2,$3}' | column  -t

# 输出当前ip 地址 方便nomachine 连接
echo
echo -----------------------
echo + current ip adresses +
echo -----------------------
netdevs=$(ls /sys/class/net/| grep -E "^eth[0-9]|^bond[0-9]")

for netdev in $netdevs
do
    address=$(ip a sh $netdev | grep 'inet '| awk '{print $2}' | awk -F/ '{print $1}')
    echo $netdev: $address
done
